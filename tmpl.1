.Dd $Mdocdate: May 28 2018$
.Os
.Dt TMPL 1
.Sh NAME
.Nm tmpl
.Nd Generates
.Xr mkstemp 3
file and writes output of PROGRAM to it
.Sh SYNOPSIS
.Nm tmpl
.Op Fl hV
.Op Fl fc
.Op Fl T Ar FORMAT
.Op Fl e Ar KEY=VALUE
.Op Fl d Ar SECONDS
.Op Fl p Ar PROGRAM
.Op Fl r Ar COMMAND
.Ar template...
.Sh DESCRIPTION
Generates
.Xr mkstemp 3
file and writes output of
.Ar PROGRAM
to it. Alternativley, when used with
.Ar -c ,
prints generated content to
.Ar STDOUT
and does not create and return a
.Xr mkstemp 3
file.
.Xr mkstemp 3
files are created with mode
.Ar 0400 .
This can not be changed.
.Pp
This utility is especially useful if you need to dynamically create
configuration files for programs.
.Pp
.Nm
does not have any templating language itself, instead it uses STDOUT from whatever you pass to
.Fl p Ar PROGRAM .
This allows you to use any templating language you want, if it has an interpreter or if you can wrap a script around it.
.Pp
To use, for example, erb you'd do something like this:
.Pp
.Bd -offset center
tmpl -p
.Dq /usr/local/bin/erb -T-
/path/to/your.erb
.Ed
.Sh OPTIONS
.Bl -tag -width Ds
.It Fl h, -help
Print help and exit
.It Fl -detailed-help
Print help, including all details and hidden options, and exit
.It Fl V, -version
Print version and exit
.It Fl f, -force
Force output generation even if
.Ar PROGRAM
fails on a
.Ar template...
Use with caution!
.It Fl c, -cat
Print output to
.Ar STDOUT
and do not create and return
.Xr mkstemp 3
file
.It Fl T, -mkstemp-template Ar FORMAT
Set
.Xr mkstemp 3
template. (default: /tmp/.tmpl-XXXXXXXXXX)
.It Fl e, -environment Ar KEY=VALUE
Set environment variable KEY to VALUE prior to running
.Ar PROGRAM
or
.Ar COMMAND
.It Fl d, -delete Ar SECONDS
Spawns new process which deletes
.Xr mkstemp 3
file after
.Ar SECONDS
seconds. Value is passed to sleep(3).
.It Fl r, -run Ar COMMAND
Run
.Ar COMMAND
and deletes
.Xr mkstemp 3 file afterwards
.It Fl p, -program Ar PROGRAM
Pass
.Ar template...
to
.Ar PROGRAM
(default: /bin/sh)
.El
.Sh TEMPLATE
A
.Va TEMPLATE
is a shell script or any other input file or argument given to
.Ar PROGRAM
set with
.Fl p .
.Pp
The default program is
.Va /bin/sh
.Pp
For example:
.Pp
.Dl tmpl -p /bin/sh /path/to/script1.sh /path/to/script2.sh
.Pp
will run script1.sh and script2.sh successively and result in 2 system calls:
.Pp
.Dl /bin/sh /path/to/script1.sh
.Dl /bin/sh /path/to/script2.sh
.Pp
If either script fails to execute no output or
.Xr mkstemp 3
file will be generated unless
.Fl f
is used.
.Pp
For example:
.Pp
.Dl tmpl -f -r 'httpd -f %f' server.sh vhosts.sh
.Pp
will run httpd with the generated
.Xr mkstemp 3
file as its configuration file even though one of the scripts might have failed. This could lead to an unsafe httpd config or otherwise unwanted behaviour. The use of
.Fl f
is not encouraged unless you are
\fB\really\fR
sure!

STDERR is never written to
.Nm
its buffer.
.Sh EXAMPLES
A typical use case would be running (neo)mutt with multiple accounts using a single
configuration file.
.Pp
.Dl tmpl -r 'neomutt -F %f' -e ACCOUNT=k@hiddenbox.org ~/.mutt/mutt-gen-config.sh
.Pp
This will pass ~/.mutt/mutt-gen-config.sh, which is a script that generates a mutt configuration file, to /bin/sh. All output mutt-gen-config.sh generates will be written to a
.Xr mkstemp 3
file which is then read by neomutt. Since neomutt is called by
.Nm
via
.Fl r ,
.Nm
automatically deletes the generated
.Xr mkstemp 3
file as soon as neomutt exits.
.Pp
The same example could also be written as:
.Pp
.Dl neomutt -F $(tmpl -e ACCOUNT=k@hiddenbox.org ~/.mutt/mutt-gen-config.sh)
.Pp
but in this case
.Nm
can not remove the
.Xr mkstemp 3
file since it never knows when neomutt exits. A better approach would be something like
.Pp
.Bd -literal -offset center
CFG=$(tmpl -e ACCOUNT=k@hiddenbox.org ~/.mutt/mutt-gen-config.sh)
neomutt -F $CFG; rm -f $CFG
.Ed
.Pp
or
.Pp
.Dl neomutt -F $(tmpl -d 5 -e ACCOUNT=k@hiddenbox.org ~/.mutt/mutt-gen-config.sh)
.Pp
will give neomutt 5 seconds (via
.Fl d )
to read the config from
.Xr mkstemp 3
file, which gets then deleted.
.Pp
Try the following example in your terminal:
.Pp
.Dl cat $(tmpl -p /bin/echo 'this is a test')
.Pp
or
.Dl tmpl -r 'cat %f' -p /bin/echo 'this is still a test'
.Pp
This should give you a basic overview of what
.Nm
can do for you.
.Sh BUGS
The parser for
.Fl r
is pretty bad so don't try to use any fancy shell syntax with quotes or other special chars. It might lead to unexpected behaviour. You should instead use a wrapper script.
.Sh SEE ALSO
.Xr mkstemp 3
.Sh AUTHORS
.Nm
is developed by Konrad Lother <k@hiddenbox.org>.
